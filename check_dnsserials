#!/usr/bin/env bash

#  check_dnsserials is derived from checkserialdns.sh
#  Copyright (C) 2015 Benedikt Heine <benedikt@heine.rocks>
#
#  checkserialdns.sh: checks if your DNS master and slaves are synchronised
#  Copyright (C) 2014 Benedikt Heine <bebe@bebehei.de>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program. If not, see http://www.gnu.org/licenses/.
#
# checks if your dns-servers are synchronised by
# comparing the serial-number in the domains SOA-RR

export PATH="/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin"
PROGNAME="$(basename "${0}")"
PROGPATH="$(sed -e 's,[\\/][^\\/][^\\/]*$,,' <<< "${0}")"
REVISION="1.2.1"
COMMAND_DIG="$(command -v "${COMMAND_DIG:-dig}")"

# source a utils.sh from nagios-plugins
# if the check is not executed in the normal check-directory,
# we'll search on common places. This gives us the ability to
# avoid problems with the package-manager
for script in \
	"${PROGPATH}/utils.sh" \
	/usr/local/nagios/libexec/utils.sh \
	/usr/lib/nagios/plugins/utils.sh \
	/usr/lib/monitoring-plugins/utils.sh \
	; do
	if [ -r "${script}" ] && [ -f "${script}" ]; then
		. "${script}"
		utils_found=true
		break
	fi
done

if ! "${utils_found:-false}"; then
	echo "Cannot include monitoring plugins' \"utils.sh\"." >&2
	exit 1
fi

error(){ printf '%s\n' "${@}" >&2; exit "${STATE_UNKNOWN}"; }
debug(){   [ "${verbose}" -lt 2 ] || printf '%s\n' "${@}"; }
verbose(){ [ "${verbose}" -lt 1 ] || printf '%s\n' "${@}"; }

usage(){
	cat <<-FIN
	usage: ${PROGNAME} -d DOMAIN [-H DNS-MASTER] [-S DNS-SLAVES] [ -s SOA-SERIAL] [-w FAILS] [-c FAILS] [-t TOLERANCE ] [ -h -v ]

	DNS-MASTER: The master to get all main informations from
	DNS-SLAVES: The slaves to compare with the master's serial
	SOA-SERIAL: The serial number used to compare all DNS slaves (not recommended to set)
	FAILS: The amount of DNS servers allowed having another serial (=> amount of dns servers not in sync) (defaults to 0)
	TOLERANCE: The acceptable difference secondary serial numbers can be behind master. Useful for DDNS sites with a lot of devices

	If any of DNS-MASTER, DNS-SLAVES or SOA-SERIAL is unset, it'll get queried from the DNS system.
	FIN
	exit "${STATE_UNKNOWN}"
}

master=""
serial=""
verbose=0
fails=0
tolerance=0
state="${STATE_UNKNOWN}"
failedServers=()

while getopts ":vhd:H:S:s:c:w:t:" opt; do
	case "${opt}" in
		v)
			verbose=$((verbose + 1))
			;;
		h)
			usage
			;;
		d)
			domain="${OPTARG}"
			;;
		H)
			master="${OPTARG}"
			;;
		S)
			slaves="${OPTARG}"
			;;
		s)
			serial="${OPTARG}"
			;;
		c)
			crit="${OPTARG}"
			;;
		w)
			warn="${OPTARG}"
			;;
		t)
			tolerance="${OPTARG}"
			;;
		\?)
			error "Invalid option: -${OPTARG}" \
				"Use '-h' to acquire usage output."
			;;
		:)
			error "Option -${OPTARG} requires an argument." \
				"Use '-h' to acquire usage output."
			;;
	esac
done

[ -n "${COMMAND_DIG}" ] || error "No command 'dig' available."
[ -n "${domain}" ]      || error "No domain specified!"

verbose "Domain ${domain}"

# check warning and critical values
[ -z "${crit}" ] || [ "${crit}" -ge 0 ] \
	|| error "Critical value has to be positive."
[ -z "${warn}" ] || [ "${warn}" -ge 0 ] \
	|| error "Warning value has to be positive."
[ -z "${warn}" ] || [ -z "${crit}" ] || [ "${warn}" -le "${crit}" ] \
	|| error "Warning value has to be lower than critical."
[ -z "${tolerance}" ] || [ "${tolerance}" -gt 0 ] \
	|| error "Tolerance value has to be positive."

# if no master given, use the standard DNS to determine the master
if [ -z "${master}" ]; then
	debug "Getting master NS from DNS"
	read -r master _ \
		<<< "$("${COMMAND_DIG}" +short SOA "${domain}")"
fi
[ -n "${master}" ] || error "Cannot find a master NS for ${domain}"
verbose "Master NS: ${master}"

# if no serial given, get the master server to determine the serial
if [ -z "${serial}" ]; then
	debug "Getting master serial from ${master}"
	read -r _ _ serial _ \
		<<< "$("${COMMAND_DIG}" +short SOA "@${master}" "${domain}")"
fi
[ -n "${serial}" ] || error "Cannot grab a serial number from master ${master}"
verbose "Master serial: ${serial}"

# Grab the slaves from DNS
if [ -z "${slaves}" ]; then
	debug "Getting slave NS information from ${master}"
	slaves="$("${COMMAND_DIG}" +short NS "@${master}" "${domain}")"
fi
[ -n "${slaves}" ] || error "Cannot query the NS entries for ${domain}"

# Iterate over the given NS-RRs and test serials
for server in ${slaves}; do
	debug "Getting slave serial from ${server}"
	read -r _ _ serial_slave _ \
		<<< "$("${COMMAND_DIG}" +short +norecurse SOA "@${server}" "${domain}")"

	if [ "x${serial_slave}" = "x${serial}" ]; then
		verbose "OK:  ${domain} ${server} ${serial}"
		else
			if [[ ${tolerance} -gt 0 ]]; then
				if [ $((${serial} - ${serial_slave})) -lt 0 ]; then
					verbose "CRITIAL: ${domain} ${server} ${serial} < ${serial_slave}"
					fails=$((fails + 1))
					failedServers+=(${server})
					debug "Incrementing failed states to ${fails}"
				elif [ $((${serial} - ${serial_slave})) -gt ${tolerance} ]; then
					verbose "BAD: ${domain} ${server} ${serial} - ${serial_slave} > ${tolerance}"
					fails=$((fails + 1))
					failedServers+=(${server})
					debug "Incrementing failed states to ${fails}"
				else
					verbose "OK:  ${domain} ${server} ${serial} - ${serial_slave} < ${tolerance}"
				fi
			else
				verbose "BAD: ${domain} ${server} ${serial_slave}"
				fails=$((fails + 1))
				failedServers+=(${server})
				debug "Incrementing failed states to ${fails}"
			fi
	fi
done

# interpret the amount of fails
if [ -n "${warn}" ] && [ "${fails}" -gt "${warn}" ]; then
	state="${STATE_WARN}"
	msg="DNS WARN, master serial: ${serial}, fails: ${fails}"
fi
if [ -n "${crit}" ] && [ "${fails}" -gt "${crit}" ]; then
	state="${STATE_CRITICAL}"
	msg="DNS CRITICAL, master serial: ${serial}, fails: ${fails}"
fi
if [ -z "${crit}" ] && [ -z "${warn}" ] && [ "${fails}" -gt 0 ]; then
	state="${STATE_CRITICAL}"
	msg="DNS CRITICAL, master serial: ${serial}, fails: ${fails}"
	else
		msg="DNS OK, master serial: ${serial}, fails: ${fails}"
		state="${STATE_OK}"
fi

if [ "${fails}" -gt 0 ]; then
	msg+=", failed Servers: ${failedServers[@]}"
fi

printf '%s\n' "${msg}"
exit "${state}"
